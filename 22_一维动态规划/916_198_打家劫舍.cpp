#include <map>
#include <unordered_map>
#include <unordered_set>
#include <iostream>
#include <stdio.h>
#include <queue>
#include <string>
using namespace std;

//你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
//给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

//设i为偷到i号房屋最大的收益，dp[i] = max{dp[i-2],dp[i-3]}+n[i]
class Solution {
public:
    int rob(vector<int>& nums) {
        if (nums.size() == 1)
            return nums[0];
        vector<int> dp{  };
        for (int i = 0;i < nums.size();i++) {
            int pre2 = i - 2 >= 0 ? dp[i - 2] : 0;
            int pre3 = i - 3 >= 0 ? dp[i - 3] : 0;
            dp.push_back( nums[i] + max(pre2, pre3));
        }
        return max(dp[nums.size() - 1], dp[nums.size() - 2]);
    }
};

int main() {
    vector<int> nums{ 1,2,3,1 };
    Solution sol;
    sol.rob(nums);


}